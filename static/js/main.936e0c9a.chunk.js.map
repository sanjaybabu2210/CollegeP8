{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/Header.js","components/Column.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","date","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Header","Column","list","App","setEventData","useEffect","a","fetch","res","json","events","fetchEvents","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAYeA,EARQ,SAAC,GAAwB,EAAvBC,IAAuB,EAAlBC,IAAmB,IAAdC,EAAa,EAAbA,QAC/B,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCOjCG,EAZS,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACtB,OACI,sBAAKJ,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAAUI,EAAKC,QACvB,wCAAU,uCAAUD,EAAKE,KAAf,iBCHpBC,EAAM,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAAU,EAECC,mBAAS,MAFV,mBAEhCC,EAFgC,KAElBC,EAFkB,KAIjCC,EAAUN,EAAUO,KAAK,SAAAC,GAC3B,GAA2B,IAAxBA,EAAGC,WAAW,GAAGZ,GAChB,OAAO,cAAC,EAAD,CAAgBR,IAAKmB,EAAGE,WAAW,GAAGC,YAAY,GAAIrB,IAAKkB,EAAGE,WAAW,GAAGC,YAAY,GAAIpB,QAAS,kBAAMc,EAAgB,CAACR,GAAIW,EAAGX,GAAIC,KAAMU,EAAGE,WAAW,GAAGZ,aAI7K,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC,IAAD,CACIoB,iBAAkB,CAAEC,IAAK,WACzBC,cAAeb,EACfc,YAAgBb,EAHpB,SAKKI,IAEAF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKxDL,EAAIiB,aAAe,CACff,OAAQ,CACJZ,IAAK,QACLC,IAAK,SAETY,KAAM,IAGKH,QC1BAkB,EARA,WACX,OACI,wBAAQzB,UAAU,SAAlB,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,wBCWGwB,EAjBA,SAAC,GAAmB,IACzBC,EADwB,EAAhBnB,UACSO,KAAK,SAAAC,GACxB,GAA2B,IAAxBA,EAAGC,WAAW,GAAGZ,GAChB,OAAO,8BACP,+BACI,sCAAQ,iCAAUW,EAAGX,QACrB,wCAAU,uCAAUW,EAAGE,WAAW,GAAGZ,KAA3B,kBAMtB,OAAO,qBAAKN,UAAU,cAAf,SACF2B,KCeMC,MAvBf,WAAgB,IAAD,EAEqBjB,mBAAS,IAF9B,mBAENH,EAFM,KAEKqB,EAFL,KAcb,OAVAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,sEACAC,MAAM,mDADN,cACZC,EADY,gBAEOA,EAAIC,OAFX,gBAEVC,EAFU,EAEVA,OACRN,EAAaM,GAHK,2CAAH,qDAKjBC,GACAC,QAAQC,IAAI9B,KACX,IAGD,sBAAKR,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAKQ,UAAWA,IAChB,cAAC,EAAD,CAAQA,UAAWA,QCXV+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.936e0c9a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport locationIcon from '@iconify/icons-mdi/account';\r\n\r\nconst LocationMarker = ({lat, lng, onClick}) => {\r\n    return(\r\n        <div className=\"location-marker\" onClick={onClick}>\r\n            <Icon icon={locationIcon} className=\"location-icon\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationMarker;","import React from 'react';\r\n\r\nconst LocationInfoBox = ({info}) => {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>ID: <strong>{ info.id }</strong></li>\r\n                <li>Date: <strong> {info.date} </strong></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LocationInfoBox;","import {useState} from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport LocationMarker from './LocationMarker';\r\nimport LocationInfoBox from './LocationInfoBox';\r\n\r\nconst Map = ({eventData, center, zoom}) => {\r\n    \r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const markers = eventData.map( ev => {\r\n        if(ev.categories[0].id === 8){\r\n            return <LocationMarker lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick={() => setLocationInfo({id: ev.id, date: ev.geometries[0].date})}/>\r\n        }\r\n    })\r\n    \r\n    return (\r\n        <div className=\"map\">\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: \"API Key\"}}\r\n                defaultCenter={center}\r\n                defaultZoom = { zoom }\r\n            >\r\n                {markers}\r\n                </GoogleMapReact>\r\n                {locationInfo && <LocationInfoBox info={locationInfo}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nMap.defaultProps = {\r\n    center: {\r\n        lat: 13.0827,\r\n        lng: 80.2707\r\n    },\r\n    zoom: 15\r\n}\r\n\r\nexport default Map;","import { Icon } from '@iconify/react';\r\nimport locationIcon from '@iconify/icons-mdi/account'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1><Icon icon={locationIcon}/> Person Tracker</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","const Column = ({ eventData }) => {\r\n    const list = eventData.map( ev => {\r\n        if(ev.categories[0].id === 8){\r\n            return <div>\r\n            <ul>\r\n                <li>ID: <strong>{ ev.id }</strong></li>\r\n                <li>Date: <strong> {ev.geometries[0].date} </strong></li>\r\n            </ul>\r\n            </div>\r\n        }\r\n    })\r\n\r\n    return <div className=\"column-data\">\r\n        {list}\r\n    </div>\r\n}\r\n\r\nexport default Column;","import Map from './components/Map.js';\r\nimport {useState, useEffect} from 'react';\r\nimport Header from './components/Header'\r\nimport Column from './components/Column'\r\n\r\nfunction App() {\r\n\r\n  const [eventData, setEventData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\r\n      const { events } = await res.json()\r\n      setEventData(events)\r\n    }\r\n    fetchEvents()\r\n    console.log(eventData);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Map eventData={eventData}/>\r\n      <Column eventData={eventData}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}